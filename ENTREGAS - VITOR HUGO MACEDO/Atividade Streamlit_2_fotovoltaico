import streamlit as st
import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.seasonal import seasonal_decompose
import matplotlib.pyplot as plt
from datetime import date

st.set_page_config(page_title="Previs√£o Solar Goi√°s", layout="wide")

st.title("‚òÄÔ∏è Estimativa de Irradia√ß√£o Solar e Economia Fotovoltaica ‚Äì Goi√°s")

with st.sidebar:
    st.header("‚öôÔ∏è Par√¢metros de Entrada")
    uploaded_file = st.file_uploader("Escolha o arquivo de irradi√¢ncia (Excel):", type=['xlsx'])
    start_date = st.date_input("Per√≠odo inicial da s√©rie", date(2015, 1, 1))
    forecast_months = st.number_input("Meses para previs√£o", min_value=1, max_value=24, value=12)
    potencia_kwp = st.number_input("Pot√™ncia do sistema (kWp)", min_value=0.1, value=5.0, step=0.1)
    preco_kwh = st.number_input("Custo do kWh (R$/kWh)", min_value=0.1, value=0.90, step=0.05)
    eficiencia = 0.80  # Efici√™ncia fixa (80%)
    processar = st.button("Processar")

if uploaded_file and processar:
    try:
        # --- Leitura e tratamento do arquivo ---
        df = pd.read_excel(uploaded_file)
        df = df.dropna(how='all')  # remove linhas vazias
        df.columns = df.columns.str.strip()

        # --- Convers√£o para n√∫meros e c√°lculo da m√©dia estadual ---
        df = df.apply(pd.to_numeric, errors='coerce') 
        df['Media_Estadual'] = df.mean(axis=1, skipna=True)


        # Cria√ß√£o da s√©rie temporal (mensal)
        ts_data = pd.Series(df['Media_Estadual'].values,
                            index=pd.date_range(start=start_date, periods=len(df), freq='M'))

        # --- Decomposi√ß√£o da s√©rie ---
        decompose = seasonal_decompose(ts_data, model='additive')
        fig_decompose = decompose.plot()
        fig_decompose.set_size_inches(10, 8)

        # --- Modelo SARIMA para previs√£o ---
        model = SARIMAX(ts_data, order=(2, 0, 0), seasonal_order=(0, 1, 1, 12))
        model_fit = model.fit()
        forecast = model_fit.forecast(steps=forecast_months)

        # --- C√°lculo da energia gerada e economia ---
        energia_gerada = forecast * 30 * potencia_kwp * eficiencia
        economia_reais = energia_gerada * preco_kwh

        # --- Gr√°fico de previs√£o da irradi√¢ncia ---
        fig_forecast, ax = plt.subplots(figsize=(10, 5))
        ts_data.plot(ax=ax, label='Hist√≥rico')
        forecast.plot(ax=ax, style='r--', label='Previs√£o')
        ax.set_title("Previs√£o da Irradia√ß√£o M√©dia no Estado de Goi√°s")
        ax.legend()

        # --- Exibi√ß√£o dos resultados ---
        col1, col2 = st.columns([2, 2])

        with col1:
            st.subheader("üìä Decomposi√ß√£o da S√©rie Temporal")
            st.pyplot(fig_decompose)

        with col2:
            st.subheader("üîÆ Previs√£o da Irradia√ß√£o M√©dia")
            st.pyplot(fig_forecast)

        # --- Tabela de resultados ---
        resultados = pd.DataFrame({
            "M√™s": forecast.index.strftime("%b/%Y"),
            "Irradia√ß√£o M√©dia (kWh/m¬≤/dia)": forecast.round(2),
            "Energia Gerada (kWh/m√™s)": energia_gerada.round(2),
            "Economia Estimada (R$)": economia_reais.round(2)
        })

        st.subheader("üí∞ Estimativa Mensal de Gera√ß√£o e Economia")
        st.dataframe(resultados, use_container_width=True)

        # --- Gr√°fico de barras da economia ---
        fig_bar, ax = plt.subplots(figsize=(8, 4))
        ax.bar(resultados["M√™s"], resultados["Economia Estimada (R$)"])
        ax.set_title("Economia Mensal Estimada (R$)")
        ax.set_ylabel("R$")
        ax.set_xticklabels(resultados["M√™s"], rotation=45)
        st.pyplot(fig_bar)

        st.success("‚úÖ An√°lise conclu√≠da com sucesso!")

    except Exception as ex:
        st.error(f"Erro ao processar os dados: {ex}")

#streamlit run app_irradiancia_goias.py
