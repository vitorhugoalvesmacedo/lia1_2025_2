import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import os

st.title("üîã Previs√£o de Gasto e Retorno de Investimento em Projetos Fotovoltaicos")

# Nome do arquivo
file_name = "dados_fotovoltaico.csv"

# Gerar dataset se n√£o existir
if not os.path.exists(file_name):
    np.random.seed(42)
    n = 50
    irradiancia = np.random.uniform(4, 6.5, n)  # kWh/m¬≤/dia
    potencia_instalada = np.random.uniform(2, 10, n)  # kWp
    eficiencia = np.random.uniform(0.75, 0.95, n)  # efici√™ncia global
    consumo_mensal = 300 + 50 * potencia_instalada - 40 * irradiancia * eficiencia + np.random.normal(0, 20, n)

    data = pd.DataFrame({
        "irradiancia": irradiancia,
        "potencia_instalada": potencia_instalada,
        "eficiencia": eficiencia,
        "gasto_mensal_energia": consumo_mensal
    })
    data.to_csv(file_name, sep=";", index=False)
else:
    data = pd.read_csv(file_name, sep=";")

# Separar vari√°veis
X = data[["irradiancia", "potencia_instalada", "eficiencia"]]
y = data["gasto_mensal_energia"]

# Treinar modelo
model = LinearRegression().fit(X, y)

col1, col2 = st.columns(2)

# Coluna 1 - Dados
with col1:
    st.header("üìä Dados de Treinamento")
    st.dataframe(data.head())

# Coluna 2 - Gr√°fico de Dispers√£o
with col2:
    st.header("üìà Dispers√£o: Pot√™ncia x Gasto")
    fig, ax = plt.subplots()
    ax.scatter(data["potencia_instalada"], data["gasto_mensal_energia"], color="blue")
    ax.set_xlabel("Pot√™ncia Instalada (kWp)")
    ax.set_ylabel("Gasto Mensal (R$)")
    st.pyplot(fig)

st.divider()

st.header("üí° Simula√ß√£o de Novo Projeto Fotovoltaico")

irr = st.number_input("Irradia√ß√£o M√©dia (kWh/m¬≤/dia)", min_value=3.0, max_value=8.0, value=5.5, step=0.1)
pot = st.number_input("Pot√™ncia Instalada (kWp)", min_value=1.0, max_value=20.0, value=5.0, step=0.5)
efi = st.number_input("Efici√™ncia do Sistema", min_value=0.7, max_value=1.0, value=0.9, step=0.01)
custo_kwp = st.number_input("Custo Estimado por kWp (R$)", min_value=3000.0, max_value=8000.0, value=4500.0, step=100.0)
gasto_atual = st.number_input("Gasto Mensal Atual (R$)", min_value=100.0, max_value=2000.0, value=500.0, step=10.0)

process = st.button("üîÆ Calcular Previs√£o e Retorno")

if process:
    # Previs√£o de gasto ap√≥s o sistema solar
    new_data = pd.DataFrame([[irr, pot, efi]], columns=["irradiancia", "potencia_instalada", "eficiencia"])
    gasto_previsto = model.predict(new_data)[0]

    # C√°lculo de investimento e retorno
    investimento_total = custo_kwp * pot
    economia_mensal = gasto_atual - gasto_previsto
    if economia_mensal > 0:
        payback = investimento_total / economia_mensal
    else:
        payback = None

    # Exibir resultados principais
    st.subheader("üìâ Resultado da Simula√ß√£o")
    st.write(f"**Gasto Mensal Previsto:** R$ {gasto_previsto:.2f}")
    st.write(f"**Investimento Total:** R$ {investimento_total:,.2f}")
    st.write(f"**Economia Mensal Estimada:** R$ {economia_mensal:.2f}")

    if payback:
        st.success(f"‚è±Ô∏è Tempo de Retorno do Investimento: **{payback:.1f} meses** (~{payback/12:.1f} anos)")

        # Criar gr√°fico de retorno acumulado
        meses = np.arange(0, int(payback * 1.5))  # at√© 150% do payback
        retorno = -investimento_total + economia_mensal * meses

        fig2, ax2 = plt.subplots()
        ax2.plot(meses, retorno, color="green", linewidth=2)
        ax2.axhline(0, color="red", linestyle="--")
        ax2.set_xlabel("Meses")
        ax2.set_ylabel("Saldo Acumulado (R$)")
        ax2.set_title("Evolu√ß√£o do Retorno do Investimento")
        st.pyplot(fig2)

        st.caption("A linha vermelha indica o ponto onde o investimento se paga (saldo = 0).")
    else:
        st.error("O sistema n√£o gera economia neste cen√°rio (verifique os valores inseridos).")

    st.caption("Modelo baseado em dados simulados de projetos residenciais fotovoltaicos.")
